#!/usr/bin/env python3

# SPDX-FileComment: k8s-secret-decode
# SPDX-FileCopyrightText: Copyright (C) 2023 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

import argparse
import base64
import sys

import yaml


class K8sSecretDecode:
    def parse_args(self, argv=None):
        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
        parser.add_argument(
            "file",
            type=argparse.FileType("r"),
            nargs="*",
            default=[sys.stdin],
            help="File to decode",
        )
        return parser.parse_args(args=argv[1:])

    def main(self):
        args = self.parse_args()
        out = []
        for f in args.file:
            for y in yaml.safe_load_all(f):
                if "data" in y:
                    for k in list(y["data"].keys()):
                        try:
                            decoded_v = base64.b64decode(y["data"][k]).decode("UTF-8")
                        except UnicodeDecodeError:
                            continue
                        if "stringData" not in y:
                            y["stringData"] = {}
                        y["stringData"][k] = decoded_v
                        del y["data"][k]
                    if len(y["data"]) == 0:
                        del y["data"]
                out.append(y)
        sys.stdout.write(yaml.safe_dump_all(out))


if __name__ == "__main__":
    sys.exit(K8sSecretDecode().main())
