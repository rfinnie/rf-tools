#!/usr/bin/env python3

# SPDX-FileComment: zipimgcat - Extract image files to stdout from zip archives
# SPDX-FileCopyrightText: Copyright (C) 2019-2021 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

import argparse
import logging
import shutil
import sys
import zipfile


def numfmt(
    num,
    fmt="{num.real:0.02f} {num.prefix}",
    binary=False,
    rollover=1.0,
    limit=0,
    prefixes=None,
):
    """Formats a number with decimal or binary prefixes

    num: Input number
    fmt: Format string of default repr/str output
    binary: If True, use divide by 1024 and use IEC binary prefixes
    rollover: Threshold to roll over to the next prefix
    limit: Stop after a specified number of rollovers
    prefixes: List of (decimal, binary) prefix strings, ascending
    """
    # SPDX-SnippetComment: Originally from https://github.com/rfinnie/rf-pymods
    # SPDX-SnippetCopyrightText: Copyright (C) 2020-2021 Ryan Finnie
    # SPDX-LicenseInfoInSnippet: MIT

    class NumberFormat(float):
        prefix = ""
        fmt = "{num.real:0.02f} {num.prefix}"

        def __str__(self):
            return self.fmt.format(num=self)

        def __repr__(self):
            return str(self)

    if prefixes is None:
        prefixes = [
            ("k", "Ki"),
            ("M", "Mi"),
            ("G", "Gi"),
            ("T", "Ti"),
            ("P", "Pi"),
            ("E", "Ei"),
            ("Z", "Zi"),
            ("Y", "Yi"),
        ]
    divisor = 1024 if binary else 1000
    if limit <= 0 or limit > len(prefixes):
        limit = len(prefixes)

    count = 0
    p = ""
    for prefix in prefixes:
        if num < (divisor * rollover):
            break
        if count >= limit:
            break
        count += 1
        num = num / float(divisor)
        p = prefix[1] if binary else prefix[0]
    ret = NumberFormat(num)
    ret.fmt = fmt
    ret.prefix = p
    return ret


class ZipImgCat:
    zip_obj = None
    target_files = None
    chosen_files = None

    def parse_args(self, argv=None):
        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )

        parser.add_argument("archive", help="Archive to extract")
        parser.add_argument(
            "files", nargs="*", help="File to extract from archive", metavar="file"
        )

        parser.add_argument(
            "--debug", action="store_true", help="Print debugging information"
        )
        parser.add_argument(
            "--extensions",
            default="img,iso,bin,dmg",
            help="Comma-separated list of image extensions",
        )

        return parser.parse_args(args=argv[1:])

    def make_target_files(self):
        self.target_files = []
        for info_entry in self.zip_obj.infolist():
            if info_entry.is_dir():
                continue
            if info_entry in self.chosen_files:
                self.target_files.append(info_entry)
                continue
            for ext in self.args.extensions.split(","):
                if info_entry.filename.lower().endswith(".{}".format(ext.lower())):
                    self.target_files.append(info_entry)

    def display_target_files(self):
        # This preserves the order if multiple files specified by the user
        to_display = list(self.chosen_files)
        for file in self.target_files:
            if file not in self.chosen_files:
                to_display.append(file)

        for file in to_display:
            print(
                (
                    "{compress_size:7.02f} "
                    "{compress_size.prefix}B -> {file_size:7.02f} "
                    "{file_size.prefix}B "
                    "({:6.02%})  {}{}"
                ).format(
                    ((file.compress_size / file.file_size) if file.file_size else 0),
                    file.filename,
                    " [âœ“]" if file in self.chosen_files else "",
                    compress_size=numfmt(file.compress_size, binary=True),
                    file_size=numfmt(file.file_size, binary=True),
                ),
                file=sys.stderr,
            )

    def validate_user_files(self):
        chosen_files = []
        for filename in self.args.files:
            found_file = None
            for file in self.zip_obj.infolist():
                if filename == file.filename:
                    found_file = file
                    break
            if found_file is None:
                raise ValueError("Cannot find {}".format(filename))
            else:
                chosen_files.append(file)
        return chosen_files

    def main(self):
        self.args = self.parse_args()
        logging.basicConfig(
            level=(logging.DEBUG if self.args.debug else logging.INFO),
            format="%(levelname)s: %(message)s",
        )
        self.zip_obj = zipfile.ZipFile(self.args.archive, "r")

        self.chosen_files = []
        if self.args.files:
            try:
                self.chosen_files = self.validate_user_files()
            except ValueError as e:
                logging.error(
                    "Cannot validate supplied files in {}: {}".format(
                        self.args.archive, e
                    )
                )
                return 1
        self.make_target_files()

        if len(self.chosen_files) == 0:
            if len(self.target_files) == 0:
                logging.error(
                    "Cannot determine image file in {}".format(self.args.archive)
                )
                return 1
            elif len(self.target_files) > 1:
                logging.warning(
                    "{} contains multiple image files, picking the first one found".format(
                        self.args.archive
                    )
                )
                self.chosen_files = [self.target_files[0]]
            else:
                self.chosen_files = [self.target_files[0]]

        self.display_target_files()

        if sys.stdout.isatty():
            return
        for file in self.chosen_files:
            with self.zip_obj.open(file, "r") as zf:
                shutil.copyfileobj(zf, sys.stdout.buffer)
            sys.stdout.buffer.flush()
        print("", file=sys.stderr)
        print("Done.", file=sys.stderr)


if __name__ == "__main__":
    sys.exit(ZipImgCat().main())
