#!/usr/bin/env python3

import sys
import zipfile


def si_number(n, binary=False, rollover=1.0, limit=0, prefixes=None):
    class SINumber(float):
        prefix = ''

        def __repr__(self):
            return '{:0.02f} {}'.format(self.real, self.prefix)

    if prefixes is None:
        prefixes = [
            ('k', 'Ki'), ('M', 'Mi'), ('G', 'Gi'), ('T', 'Ti'),
            ('P', 'Pi'), ('E', 'Ei'), ('Z', 'Zi'), ('Y', 'Yi'),
        ]
    divisor = 1024 if binary else 1000
    if limit <= 0 or limit > len(prefixes):
        limit = len(prefixes)

    count = 0
    p = ''
    for prefix in prefixes:
        if n < (divisor * rollover):
            break
        if count >= limit:
            break
        count += 1
        n = n / float(divisor)
        p = prefix[1] if binary else prefix[0]
    ret = SINumber(n)
    ret.prefix = p
    return ret


with zipfile.ZipFile(sys.argv[1], 'r') as z:
    img_files = [x for x in z.infolist() if x.filename.lower().endswith('.img') and not x.is_dir()]
    for file in img_files:
        print('{compress_size:7.02f} {compress_size.prefix}B -> {file_size:7.02f} {file_size.prefix}B ({:7.02%})  {}{}'.format(
            file.compress_size / file.file_size,
            file.filename,
            ' [*]' if file == img_files[0] else '',
            compress_size=si_number(file.compress_size, binary=True),
            file_size=si_number(file.file_size, binary=True),
        ), file=sys.stderr)
    if sys.stdout.isatty():
        sys.exit(0)
    elif len(img_files) == 0:
        print('Zip contains no .img files, exiting.', file=sys.stderr)
        sys.exit(1)
    file = img_files[0]
    if len(img_files) > 1:
        print('WARNING: Zip contains multiple .img files, picking the first one found ({}).'.format(
            file.filename
        ), file=sys.stderr)
    with z.open(file, 'r') as zf:
        while True:
            buf = zf.read(65536)
            if not buf:
                break
            sys.stdout.buffer.write(buf)
    sys.stdout.buffer.flush()
    print('', file=sys.stderr)
    print('Done.', file=sys.stderr)
