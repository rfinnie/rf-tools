#!/usr/bin/env python3

import sys
import zipfile


def si_number(n, binary=False, rollover=1.0, limit=0, prefixes=None):
    class SINumber(float):
        prefix = ""

        def __repr__(self):
            return "{:0.02f} {}".format(self.real, self.prefix)

    if prefixes is None:
        prefixes = [
            ("k", "Ki"),
            ("M", "Mi"),
            ("G", "Gi"),
            ("T", "Ti"),
            ("P", "Pi"),
            ("E", "Ei"),
            ("Z", "Zi"),
            ("Y", "Yi"),
        ]
    divisor = 1024 if binary else 1000
    if limit <= 0 or limit > len(prefixes):
        limit = len(prefixes)

    count = 0
    p = ""
    for prefix in prefixes:
        if n < (divisor * rollover):
            break
        if count >= limit:
            break
        count += 1
        n = n / float(divisor)
        p = prefix[1] if binary else prefix[0]
    ret = SINumber(n)
    ret.prefix = p
    return ret


with zipfile.ZipFile(sys.argv[1], "r") as z:
    target_files = []
    for info_entry in z.infolist():
        if info_entry.is_dir():
            continue
        for ext in ("img", "iso", "bin"):
            if info_entry.filename.lower().endswith(".{}".format(ext)):
                target_files.append(info_entry)
    if len(target_files) == 0:
        print(
            "ERROR: Cannot determine image file from {}".format(sys.argv[1]),
            file=sys.stderr,
        )
        sys.exit(1)
    if len(sys.argv) > 2:
        files = []
        for filename in sys.argv[2:]:
            found_file = None
            for file in target_files:
                if filename == file.filename:
                    found_file = file
                    break
            if found_file is None:
                print(
                    "ERROR: Cannot find {} in {}".format(filename, sys.argv[1]),
                    file=sys.stderr,
                )
                sys.exit(1)
            else:
                files.append(file)
    elif len(target_files) > 1:
        print(
            "WARNING: {} contains multiple image files, picking the first one found".format(
                sys.argv[1]
            ),
            file=sys.stderr,
        )
        files = [target_files[0]]
    else:
        files = [target_files[0]]
    for file in target_files:
        print(
            (
                "{compress_size:7.02f} "
                "{compress_size.prefix}B -> {file_size:7.02f} "
                "{file_size.prefix}B "
                "({:7.02%})  {}{}"
            ).format(
                file.compress_size / file.file_size,
                file.filename,
                " [âœ“]" if file in files else "",
                compress_size=si_number(file.compress_size, binary=True),
                file_size=si_number(file.file_size, binary=True),
            ),
            file=sys.stderr,
        )
    if sys.stdout.isatty():
        sys.exit(0)
    for file in files:
        with z.open(file, "r") as zf:
            while True:
                buf = zf.read(65536)
                if not buf:
                    break
                sys.stdout.buffer.write(buf)
        sys.stdout.buffer.flush()
    print("", file=sys.stderr)
    print("Done.", file=sys.stderr)
