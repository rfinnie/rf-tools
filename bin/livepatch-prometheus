#!/usr/bin/env python3

import logging
import os
import subprocess
import sys
import time
import yaml

from prometheus_client import CollectorRegistry, Gauge, write_to_textfile


OUTFILE = "/var/lib/prometheus/node-exporter/livepatch.prom"


def build_metrics_text(metrics):
    output = ""
    for k in sorted(metrics):
        if len(metrics[k]["values"]) == 0:
            continue
        if metrics[k]["help"]:
            output += "# HELP {} {}\n".format(k, metrics[k]["help"])
        if metrics[k]["type"]:
            output += "# TYPE {} {}\n".format(k, metrics[k]["type"])
        for a in metrics[k]["values"]:
            if a[0]:
                output += "{}{{{}}} {}\n".format(
                    k,
                    ",".join(
                        ['{}="{}"'.format(x, a[0][x]) for x in sorted(a[0].keys())]
                    ),
                    a[1],
                )
            else:
                output += "{} {}\n".format(k, a[1])
    return output


def dump_metrics():
    registry = CollectorRegistry()
    livepatch_time = Gauge(
        "livepatch_time", "Current time, seconds since epoch", registry=registry
    )
    livepatch_info = Gauge(
        "livepatch_info",
        "Livepatch information",
        ["client_version", "architecture", "cpu_model"],
        registry=registry,
    )
    livepatch_last_check_time = Gauge(
        "livepatch_last_check_time",
        "Time livepatch patches were checked (epoch)",
        registry=registry,
    )
    livepatch_kernel_running = Gauge(
        "livepatch_kernel_running",
        "Whether a kernel is currently running, plus associated patch info",
        ["kernel", "check_state", "patch_state", "version"],
        registry=registry,
    )

    try:
        status_text = subprocess.check_output(
            ["/snap/bin/canonical-livepatch", "status", "--format", "yaml"]
        )
    except subprocess.CalledProcessError:
        pass
    status = yaml.safe_load(status_text)
    livepatch_time.set(time.time())
    livepatch_info.labels(
        status["client-version"], status["architecture"], status["cpu-model"]
    ).set(1)
    livepatch_last_check_time.set(status["last-check"].timestamp())
    for k in status["status"]:
        if "kernel" not in k:
            continue
        if "livepatch" not in k:
            continue
        livepatch_kernel_running.labels(
            k["kernel"],
            k["livepatch"]["checkState"],
            k["livepatch"]["patchState"],
            k["livepatch"]["version"],
        ).set(int(k["running"]))
    write_to_textfile(OUTFILE, registry)


if __name__ == "__main__":
    if not os.path.exists("/snap/bin/canonical-livepatch"):
        sys.exit()
    if not os.path.exists(os.path.dirname(OUTFILE)):
        sys.exit()
    logging_level = logging.DEBUG if sys.stdin.isatty() else logging.INFO
    logging.basicConfig(level=logging_level)
    dump_metrics()
