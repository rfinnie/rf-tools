#!/usr/bin/env python3

# Argon ONE Raspberry Pi case SMBus fan manager
# Copyright (c) 2020 Ryan Finnie

# Required /boot/config.txt:
# [all]
# dtparam=i2c_arm=on

# Required /etc/modules:
# i2c-dev

import argparse
import datetime
import logging
import os
import pathlib
import sys
import time

import smbus


class ArgonONEFanManager:
    # Temp to fan % mapping.
    # Temps below the lowest key are forced fan off.
    # Temps above the highest key are highest value.
    # Temps between keys are scaled between their values.
    temperature_spec = {50: 20, 75: 100}

    # Do not lower or raise the fan speed if it's happened within these
    # time spans.
    lower_delta = datetime.timedelta(seconds=30)
    raise_delta = datetime.timedelta(seconds=5)

    # Time between checks
    check_frequency = datetime.timedelta(seconds=1)

    # Location of speed status file
    speed_file = None

    # Temperature input file
    temperature_file = pathlib.Path("/sys/devices/virtual/thermal/thermal_zone0/temp")
    temperature_file_fd = None

    # Bus number and address
    bus_number = 1
    bus_address = 0x1A

    bus = None
    next_lower = None
    next_raise = None
    last_speed = 0
    last_speed_temp = 0

    def get_temp(self):
        if self.temperature_file_fd is None:
            self.temperature_file_fd = self.temperature_file.open()
        self.temperature_file_fd.seek(0)
        return float(self.temperature_file_fd.read().strip()) / 1000.0

    def set_speed(self, speed, temp):
        now = datetime.datetime.now()
        if speed < self.last_speed:
            if now < self.next_lower:
                logging.debug(
                    "Wanted to lower speed from {:.02f} to {:.02f} but it's too early ({}), ignoring".format(
                        self.last_speed, speed, self.next_lower
                    )
                )
                return
            logging.info(
                "Lowering speed from {:.02f}% ({:.02f}C) to {:.02f}% ({:.02f}C)".format(
                    self.last_speed, self.last_speed_temp, speed, temp
                )
            )
        elif speed > self.last_speed:
            if now < self.next_raise:
                logging.debug(
                    "Wanted to raise speed from {:.02f} to {:.02f} but it's too early ({}), ignoring".format(
                        self.last_speed, speed, self.next_raise
                    )
                )
                return
            logging.info(
                "Raising speed from {:.02f}% ({:.02f}C) to {:.02f}% ({:.02f}C)".format(
                    self.last_speed, self.last_speed_temp, speed, temp
                )
            )
        else:
            return
        self.bus.write_byte(self.bus_address, int(speed))
        self.next_lower = now + self.lower_delta
        self.next_raise = now + self.raise_delta
        self.last_speed = speed
        self.last_speed_temp = temp
        if self.speed_file:
            self.speed_file.write_text(str(int(speed)) + "\n")

    def process(self):
        temp = self.get_temp()
        logging.debug("Temperature is {:.02f}C".format(temp))
        spec_temps = sorted(self.temperature_spec.keys())
        if temp < spec_temps[0]:
            self.set_speed(0, temp)
        elif temp >= spec_temps[-1]:
            self.set_speed(self.temperature_spec[spec_temps[-1]], temp)
        else:
            for i in range(len(spec_temps)):
                if spec_temps[i] <= temp:
                    continue
                cooler_temp = spec_temps[i - 1]
                warmer_temp = spec_temps[i]
                cooler_speed = self.temperature_spec[cooler_temp]
                warmer_speed = self.temperature_spec[warmer_temp]
                speed = ((temp - cooler_temp) / (warmer_temp - cooler_temp)) * (
                    warmer_speed - cooler_speed
                ) + cooler_speed
                logging.debug(
                    "For {:.02f}C, {:.02f}C: {:.02f}% to {:.02f}C: {:.02f}% = {:.02f}%".format(
                        temp,
                        cooler_temp,
                        cooler_speed,
                        warmer_temp,
                        warmer_speed,
                        speed,
                    )
                )
                self.set_speed(speed, temp)
                break

    def main(self):
        self.bus = smbus.SMBus(self.bus_number)
        self.bus.write_byte(self.bus_address, 0)
        self.last_speed_temp = self.get_temp()
        now = datetime.datetime.now()
        self.next_lower = now + self.lower_delta
        self.next_raise = now + self.raise_delta
        if self.speed_file:
            self.speed_file.write_text("0\n")
        while True:
            self.process()
            time.sleep(self.check_frequency.total_seconds())


def parse_args(argv=None):
    if argv is None:
        argv = sys.argv

    def _type_spec(arg):
        spec = {}
        for a in arg.split(","):
            x, y = a.split(":")
            spec[float(x)] = float(y)
        return spec

    def _type_timedelta(arg):
        return datetime.timedelta(seconds=float(arg))

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        prog=os.path.basename(argv[0]),
    )

    parser.add_argument("--bus-number", type=int, default=1, help="SMBus number")
    parser.add_argument("--bus-address", type=int, default=0x1A, help="SMBus address")
    parser.add_argument(
        "--temperature-spec",
        type=_type_spec,
        default="50:20,75:100",
        help="Temperature specification, comma-separated list of temp:fan",
    )
    parser.add_argument(
        "--lower-delta",
        type=_type_timedelta,
        default="30",
        help="Minimum seconds before lowering the fan speed",
    )
    parser.add_argument(
        "--raise-delta",
        type=_type_timedelta,
        default="5",
        help="Minimum seconds before raising the fan speed",
    )
    parser.add_argument(
        "--check-frequency",
        type=_type_timedelta,
        default="1",
        help="Seconds between checks",
    )
    parser.add_argument(
        "--temperature-file",
        type=pathlib.Path,
        default="/sys/devices/virtual/thermal/thermal_zone0/temp",
        help="File to read Pi temperature",
    )
    parser.add_argument(
        "--speed-file", type=pathlib.Path, default=None, help="File to write fan speed"
    )

    return parser.parse_args(args=argv[1:])


if __name__ == "__main__":
    logging_level = logging.DEBUG if sys.stdin.isatty() else logging.INFO
    logging.basicConfig(level=logging_level)

    args = parse_args()
    manager = ArgonONEFanManager()

    for k in dir(args):
        if k.startswith("_"):
            continue
        if not hasattr(manager, k):
            continue
        setattr(manager, k, getattr(args, k))

    if (not manager.speed_file) and os.environ.get("RUNTIME_DIRECTORY"):
        manager.speed_file = pathlib.Path(
            "{}/fan-speed".format(os.environ["RUNTIME_DIRECTORY"])
        )

    sys.exit(manager.main())
