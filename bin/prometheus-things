#!/usr/bin/env python3

# SPDX-FileComment: prometheus-things
# SPDX-FileCopyrightText: Copyright (C) 2021 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

# Sample things.yaml:
#
# hubs:
# - name: hubitat
#   url: http://hubitat.example.lan
#   access_token: 2c24f2f8-5457-4f7d-be29-1778c28e3531

import argparse
import binascii
import logging
import os
import pathlib
import random
import sys
import time

import dateutil.parser
import dateutil.tz
import prometheus_client
from prometheus_client import Counter, Gauge
import requests
import yaml


class BaseMetrics:
    prefix = "base"
    interval = 60
    registry = None
    args = None
    config = None
    needs_config = False
    collection_duration = None
    collection_errors = None

    def setup(self):
        pass

    def collect_metrics(self):
        pass

    def metrics_args(self, parser):
        pass

    def parse_args(self, argv=None):
        def _optional_path(string):
            return pathlib.Path(string) if string else None

        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            prog=os.path.basename(argv[0]),
        )

        action_group = parser.add_mutually_exclusive_group(required=True)
        action_group.add_argument(
            "--http-daemon", action="store_true", help="Run an HTTP daemon"
        )
        action_group.add_argument(
            "--prom-daemon", action="store_true", help="Run a .prom-writing daemon"
        )
        action_group.add_argument(
            "--write", action="store_true", help="Write a .prom file"
        )
        action_group.add_argument(
            "--dump", action="store_true", help="Dump a .prom file to stdout"
        )

        parser.add_argument(
            "--prom-file",
            type=pathlib.Path,
            default="/var/lib/prometheus/node-exporter/{}.prom".format(self.prefix),
            help=".prom file to write",
            metavar="FILE",
        )
        parser.add_argument(
            "--http-port",
            type=int,
            default=(
                (binascii.crc32(self.prefix.encode("UTF-8")) & (65535 - 49152)) + 49152
            ),
            help="HTTP port number",
            metavar="PORT",
        )
        parser.add_argument(
            "--interval",
            type=float,
            default=self.interval,
            help="Seconds between collections",
            metavar="SECONDS",
        )
        parser.add_argument(
            "--interval-randomize",
            type=float,
            default=10,
            help="Randomize interval by +/- PERCENT percent, 0 to disable",
            metavar="PERCENT",
        )
        default_config_file = pathlib.Path(
            "/etc/prometheus/collectors/{}.yaml".format(self.prefix)
        )
        if (not self.needs_config) and (not default_config_file.exists()):
            default_config_file = None
        parser.add_argument(
            "--config",
            type=_optional_path,
            default=default_config_file,
            help="YAML configuration file",
            metavar="FILE",
        )

        self.metrics_args(parser)
        return parser.parse_args(args=argv[1:])

    def load_config(self):
        if not self.args.config:
            return {}
        with self.args.config.open() as f:
            return yaml.safe_load(f)

    def main(self):
        logging_level = logging.DEBUG if sys.stdin.isatty() else logging.INFO
        logging.basicConfig(level=logging_level)
        self.args = self.parse_args()
        self.interval = self.args.interval
        self.config = self.load_config()
        if self.args.http_daemon:
            self.registry = prometheus_client.REGISTRY
            self.collection_duration = prometheus_client.Summary(
                "{}_collection_duration_seconds".format(self.prefix),
                "Time spent collecting metrics",
                registry=self.registry,
            )
            self.collection_errors = prometheus_client.Counter(
                "{}_collection_errors_total".format(self.prefix),
                "Errors encountered while collecting metrics",
                registry=self.registry,
            )
        else:
            self.registry = prometheus_client.CollectorRegistry()
        self.setup()

        if self.args.http_daemon:
            prometheus_client.start_http_server(
                self.args.http_port, registry=self.registry
            )
            logging.info("HTTP server running on port {}".format(self.args.http_port))

        self.main_loop()

    def main_loop(self):
        while True:
            logging.debug("Beginning collection run")
            try:
                if self.collection_duration:
                    with self.collection_duration.time():
                        self.collect_metrics()
                else:
                    self.collect_metrics()
            except Exception:
                if self.args.write or self.args.dump:
                    raise
                else:
                    logging.exception("Encountered an error during collection")
                if self.collection_errors:
                    self.collection_errors.inc()

            if self.args.prom_daemon or self.args.write:
                prometheus_client.write_to_textfile(
                    str(self.args.prom_file), registry=self.registry
                )
            elif self.args.dump:
                output = prometheus_client.generate_latest(registry=self.registry)
                print(output.decode("UTF-8"), end="")
            if self.args.write or self.args.dump:
                return

            if self.args.http_daemon or self.args.prom_daemon:
                sleep = random.uniform(
                    self.interval * (1 - (self.args.interval_randomize / 100.0)),
                    self.interval * (1 + (self.args.interval_randomize / 100.0)),
                )
                logging.debug("Sleeping for {}".format(sleep))
                time.sleep(sleep)


class Metrics(BaseMetrics):
    prefix = "things"
    needs_config = True

    def setup(self):
        label_names = ["hub", "id", "label", "manufacturer", "model", "name", "type"]
        self.metrics = {}

        defs = [
            ("reports_total", Counter, "Total reports received"),
            ("device_time_seconds", Gauge, "Thing device check-in time"),
            ("temperature_degrees_fahrenheit", Gauge, "Thing temperature"),
            ("battery_percent", Gauge, "Thing battery"),
            ("illuminance_percent", Gauge, "Thing illuminance"),
            ("humidity_percent", Gauge, "Thing humidity"),
            ("switch_on", Gauge, "1 if the switch is on"),
            ("light_level_percent", Gauge, "Light level percent"),
        ]

        for k, t, h in defs:
            self.metrics[k] = t(
                "{}_{}".format(self.prefix, k), h, label_names, registry=self.registry
            )

    def collect_metrics(self):
        for hub in self.config["hubs"]:
            self.collect_hub(hub)

    def collect_hub(self, hub):
        r = requests.get(
            "{}/apps/api/4/devices/all?access_token={}".format(
                hub["url"], hub["access_token"]
            )
        )
        r.raise_for_status()

        for thing in r.json():
            self.process_thing(thing, hub)

    def process_thing(self, thing, hub):
        if "attributes" not in thing:
            return

        labels = [hub["name"]] + [
            (thing[name] if thing[name] is not None else "")
            for name in ("id", "label", "manufacturer", "model", "name", "type")
        ]

        for g, k, f in [
            ("temperature_degrees_fahrenheit", "temperature", float),
            ("battery_percent", "battery", float),
            ("illuminance_percent", "illuminance", float),
            ("humidity_percent", "humidity", float),
            ("switch_on", "switch", lambda x: 1 if x == "on" else 0),
            ("light_level_percent", "level", float),
        ]:
            try:
                v = f(thing["attributes"][k])
            except KeyError:
                pass
            except Exception:
                logging.exception(
                    "Encountered a attribute error for {} ({})".format(
                        thing["label"], thing["id"]
                    )
                )
                pass
            else:
                self.metrics[g].labels(*labels).set(v)

        thing_date = dateutil.parser.parse(thing["date"])
        if thing_date.tzinfo is None:
            thing_date = thing_date.astimezone(dateutil.tz.tzlocal())
        self.metrics["device_time_seconds"].labels(*labels).set(
            float(thing_date.strftime("%s"))
        )
        self.metrics["reports_total"].labels(*labels).inc()


if __name__ == "__main__":
    sys.exit(Metrics().main())
