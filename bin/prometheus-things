#!/usr/bin/env python3

# SPDX-FileComment: prometheus-things
# SPDX-FileCopyrightText: Copyright (C) 2021 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

# Sample things.yaml:
#
# hubs:
# - name: hubitat
#   url: http://hubitat.example.lan
#   access_token: 2c24f2f8-5457-4f7d-be29-1778c28e3531

import argparse
import binascii
import logging
import os
import pathlib
import random
import sys
import time

import dateutil.parser
import dateutil.tz
import prometheus_client
from prometheus_client import Counter, Gauge
import requests
import yaml


class BaseMetrics:
    prefix = "unknown"
    interval = 60
    registry = None
    args = None
    config = None
    needs_config = False
    collection_duration = None
    collection_errors = None

    def setup(self):
        pass

    def collect_metrics(self):
        pass

    def parse_args(self, argv=None):
        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            prog=os.path.basename(argv[0]),
        )

        action_group = parser.add_mutually_exclusive_group(required=True)
        action_group.add_argument(
            "--http-daemon", action="store_true", help="Run an HTTP daemon"
        )
        action_group.add_argument(
            "--prom-daemon", action="store_true", help="Run a .prom-writing daemon"
        )
        action_group.add_argument(
            "--dump", action="store_true", help="Dump a .prom file"
        )

        parser.add_argument(
            "--prom-file",
            type=pathlib.Path,
            default="/var/lib/prometheus/node-exporter/{}.prom".format(self.prefix),
            help=".prom file to write",
        )
        parser.add_argument(
            "--http-port",
            type=int,
            default=(
                (binascii.crc32(self.prefix.encode("UTF-8")) & (65535 - 49152)) + 49152
            ),
            help="HTTP port number",
        )
        parser.add_argument(
            "--config",
            type=pathlib.Path,
            default="/etc/prometheus/collectors/{}.yaml".format(self.prefix),
            help="YAML configuration file",
        )

        return parser.parse_args(args=argv[1:])

    def load_config(self):
        if not self.args.config.exists():
            if not self.needs_config:
                logging.debug(
                    "{} not found, but we don't need it".format(self.args.config)
                )
                return {}
        with self.args.config.open() as f:
            return yaml.safe_load(f)

    def main(self):
        logging_level = logging.DEBUG if sys.stdin.isatty() else logging.INFO
        logging.basicConfig(level=logging_level)
        self.args = self.parse_args()
        self.config = self.load_config()
        if self.args.prom_daemon or self.args.dump:
            self.registry = prometheus_client.CollectorRegistry()
        else:
            self.registry = prometheus_client.REGISTRY
            self.collection_duration = prometheus_client.Summary(
                "{}_collection_duration_seconds".format(self.prefix),
                "Time spent collecting metrics",
                registry=self.registry,
            )
            self.collection_errors = prometheus_client.Counter(
                "{}_collection_errors_total".format(self.prefix),
                "Errors encountered while collecting metrics",
                registry=self.registry,
            )
        self.setup()

        if self.args.http_daemon:
            prometheus_client.start_http_server(
                self.args.http_port, registry=self.registry
            )
            logging.info("HTTP server running on port {}".format(self.args.http_port))

        if self.args.dump:
            self.collect_metrics()
            output = prometheus_client.generate_latest(registry=self.registry)
            print(output.decode("UTF-8"), end="")
            return

        while True:
            logging.debug("Beginning collection run")
            try:
                if self.collection_duration:
                    with self.collection_duration.time():
                        self.collect_metrics()
                else:
                    self.collect_metrics()
            except Exception:
                logging.exception("Encountered an error during collection")
                if self.collection_errors:
                    self.collection_errors.inc()
            else:
                if self.args.prom_daemon:
                    prometheus_client.write_to_textfile(
                        str(self.args.prom_file), registry=self.registry
                    )
            sleep = random.uniform(self.interval * 0.9, self.interval * 1.1)
            logging.debug("Sleeping for {}".format(sleep))
            time.sleep(sleep)


class Metrics(BaseMetrics):
    prefix = "things"
    needs_config = True

    def setup(self):
        label_names = ["hub", "id", "label", "manufacturer", "model", "name", "type"]
        self.metrics = {}

        defs = [
            ("reports_total", Counter, "Total reports received"),
            ("device_time_seconds", Gauge, "Thing device check-in time"),
            ("temperature_degrees_fahrenheit", Gauge, "Thing temperature"),
            ("battery_percent", Gauge, "Thing battery"),
            ("illuminance_percent", Gauge, "Thing illuminance"),
            ("humidity_percent", Gauge, "Thing humidity"),
        ]

        for k, t, h in defs:
            self.metrics[k] = t(
                "{}_{}".format(self.prefix, k), h, label_names, registry=self.registry
            )

    def collect_metrics(self):
        for hub in self.config["hubs"]:
            self.collect_hub(hub)

    def collect_hub(self, hub):
        r = requests.get(
            "{}/apps/api/4/devices/all?access_token={}".format(
                hub["url"], hub["access_token"]
            )
        )
        r.raise_for_status()

        for thing in r.json():
            self.process_thing(thing, hub)

    def process_thing(self, thing, hub):
        if "attributes" not in thing:
            return

        thing_used = False

        labels = [hub["name"]] + [
            (thing[name] if thing[name] is not None else "")
            for name in ("id", "label", "manufacturer", "model", "name", "type")
        ]

        for g, k in [
            ("temperature_degrees_fahrenheit", "temperature"),
            ("battery_percent", "battery"),
            ("illuminance_percent", "illuminance"),
            ("humidity_percent", "humidity"),
        ]:
            try:
                v = float(thing["attributes"][k])
            except (KeyError, ValueError):
                pass
            else:
                self.metrics[g].labels(*labels).set(v)
                thing_used = True

        if not thing_used:
            return

        thing_date = dateutil.parser.parse(thing["date"])
        if thing_date.tzinfo is None:
            thing_date = thing_date.astimezone(dateutil.tz.tzlocal())
        self.metrics["device_time_seconds"].labels(*labels).set(
            float(thing_date.strftime("%s"))
        )
        self.metrics["reports_total"].labels(*labels).inc()


if __name__ == "__main__":
    sys.exit(Metrics().main())
