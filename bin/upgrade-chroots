#!/bin/sh

set -e

[ -n "${CHROOT_BASE}" ] || CHROOT_BASE="/srv/chroot"
[ -n "${CHROOT_BLACKLIST}" ] || CHROOT_BLACKLIST="gentoo"
[ -n "${CHROOT_FAILED_D}" ] || CHROOT_FAILED_D="/var/lib/upgrade-chroots/failed.d"

if [ "${MOTD}" = 1 ]; then
    if [ ! -d "${CHROOT_FAILED_D}" ]; then
        exit 0
    fi
    failed_chroots="$(ls "${CHROOT_FAILED_D}")"
    if [ -n "${failed_chroots}" ]; then
        echo
        echo "!!! FAILED CHROOT UPGRADES: ${failed_chroots}"
        echo
    fi
    exit
fi

cd /
if [ -n "${CHROOT_FAILED_D}" ]; then
    mkdir -p "${CHROOT_FAILED_D}"
fi

failed=""
for c in $(cd "${CHROOT_BASE}" && ls -1); do
    [ -n "$c" ] || continue
    [ -d "${CHROOT_BASE}/$c" ] || continue
    [ -d "${CHROOT_BASE}/$c/usr/bin" ] || continue
    blacklisted=0
    for bl in $CHROOT_BLACKLIST; do
        [ "$c" != "$bl" ] || blacklisted=1
    done
    [ "$blacklisted" = "0" ] || continue

    if [ -n "$SPREAD" ]; then
        if [ "$(($(uuidgen | cksum | cut -d' ' -f1) % $SPREAD))" != 0 ]; then
            continue
        fi
    fi

    if [ -z "${CHRONIC}" ]; then
        echo "=== $c ==="
    fi

    if [ -e "${CHROOT_BASE}/$c/etc/lsb-release" ] && \
        grep -q "DISTRIB_ID=Ubuntu" "${CHROOT_BASE}/$c/etc/lsb-release" && \
        grep -q "development branch" "${CHROOT_BASE}/$c/etc/lsb-release"; then
        if ! $CHRONIC timeout 3600 schroot -c $c -- /bin/sh -c "apt-get --allow-releaseinfo-change update && DEBIAN_FRONTEND=noninteractive apt-get -u -y dist-upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y --purge autoremove && apt-get clean"; then
            failed="$failed $c"
            echo "=== $c FAILED ==="
            [ -z "${CHROOT_FAILED_D}" ] || touch "${CHROOT_FAILED_D}/${c}"
        else
            [ -z "${CHROOT_FAILED_D}" ] || rm -f "${CHROOT_FAILED_D}/${c}"
        fi
    elif [ -e "${CHROOT_BASE}/$c/etc/debian_version" ]; then
        if ! $CHRONIC timeout 3600 schroot -c $c -- /bin/sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -u -y dist-upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y --purge autoremove && apt-get clean"; then
            failed="$failed $c"
            echo "=== $c FAILED ==="
            [ -z "${CHROOT_FAILED_D}" ] || touch "${CHROOT_FAILED_D}/${c}"
        else
            [ -z "${CHROOT_FAILED_D}" ] || rm -f "${CHROOT_FAILED_D}/${c}"
        fi
    elif [ -e "${CHROOT_BASE}/$c/usr/bin/dnf" ]; then
        if ! $CHRONIC timeout 3600 schroot -c $c -- /bin/sh -c "dnf upgrade --assumeyes --best --allowerasing --nogpgcheck fedora-repos-rawhide && dnf upgrade --assumeyes --best --allowerasing upgrade && dnf clean packages"; then
            failed="$failed $c"
            echo "=== $c FAILED ==="
            [ -z "${CHROOT_FAILED_D}" ] || touch "${CHROOT_FAILED_D}/${c}"
        else
            [ -z "${CHROOT_FAILED_D}" ] || rm -f "${CHROOT_FAILED_D}/${c}"
        fi
    elif [ -e "${CHROOT_BASE}/$c/usr/bin/yum" ]; then
        if ! $CHRONIC timeout 3600 schroot -c $c -- /bin/sh -c "yum -y update"; then
            failed="$failed $c"
            echo "=== $c FAILED ==="
            [ -z "${CHROOT_FAILED_D}" ] || touch "${CHROOT_FAILED_D}/${c}"
        else
            [ -z "${CHROOT_FAILED_D}" ] || rm -f "${CHROOT_FAILED_D}/${c}"
        fi
    fi
done

if [ -n "$failed" ]; then
    echo "FAILED:$failed"
    exit 1
fi
