#!/usr/bin/env python3

# SPDX-FileComment: PLANES! - Display nearby planes in your terminal
# SPDX-FileCopyrightText: Copyright (C) 2024 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

import argparse
from datetime import datetime, timedelta
import json
import os
import math
import selectors
import socket
import sys

import dateutil.parser
from geographiclib.geodesic import Geodesic

# nc 127.0.0.1 30003
# http://woodair.net/sbs/article/barebones42_socket_data.htm
# MSG,3,1,1,A5A386,1,2022/05/22,21:31:55.049,2022/05/22,21:31:55.066,,5425,,,33.78403,-117.32460,,,0,,0,0
# MSG,1,1,1,A48DA9,1,2022/05/22,22:19:35.306,2022/05/22,22:19:35.332,N3928B  ,,,,,,,,,,,0

# nc 127.0.0.1 30979
# {"address":"a3f541","address_qualifier":"tisb_icao","airground_state":"airborne","callsign":"N354SH","capability_codes":{"es_in":true,"tcas_operational":false,"uat_in":true},"east_velocity":-28,"emergency":"none","emitter_category":"A7","geometric_altitude":2450,"ground_speed":37,"gva":2,"metadata":{"errors":7,"received_at":1732466616.431,"rssi":-29.2},"mops_version":2,"nac_p":9,"nac_v":2,"nic":8,"nic_baro":1,"nic_supplement":false,"north_velocity":-25,"operational_modes":{"atc_services":false,"ident_active":false,"tcas_ra_active":false},"position":{"lat":34.90659,"lon":-117.83206},"pressure_altitude":2450,"sda":2,"sil":3,"sil_supplement":"per_hour","single_antenna":true,"tisb_site_id":15,"transmit_mso":22,"true_track":228.2,"vertical_velocity_geometric":64,"vv_src":"geometric"}
# {"address":"a9c27a","address_qualifier":"tisb_icao","airground_state":"airborne","callsign":"NKS420","capability_codes":{"es_in":true,"tcas_operational":true,"uat_in":false},"east_velocity":-239,"emergency":"none","emitter_category":"A3","geometric_altitude":11900,"ground_speed":244,"gva":2,"metadata":{"errors":7,"received_at":1732466718.99,"rssi":-29.4},"mops_version":2,"nac_p":9,"nac_v":2,"nic":8,"nic_baro":1,"nic_supplement":false,"north_velocity":52,"operational_modes":{"atc_services":false,"ident_active":false,"tcas_ra_active":false},"position":{"lat":33.99492,"lon":-117.6175},"pressure_altitude":11700,"sda":3,"sil":3,"sil_supplement":"per_hour","single_antenna":false,"tisb_site_id":15,"transmit_mso":12,"true_track":282.3,"vertical_velocity_barometric":-1280,"vv_src":"barometric"}


class BaseStationMessage:
    spec = [
        ("message_type", str),
        ("transmission_type", int),
        ("session_id", int),
        ("aircraft_id", int),
        ("hex_ident", str),
        ("flight_id", int),
        ("date_message_generated", str),
        ("time_message_generated", str),
        ("date_message_logged", str),
        ("time_message_logged", str),
        ("callsign", str),
        ("altitude", int),
        ("ground_speed", int),
        ("track", str),
        ("latitude", float),
        ("longitude", float),
        ("vertical_rate", str),
        ("squawk", str),
        ("alert", str),
        ("emergency", str),
        ("spi", str),
        ("is_on_ground", str),
    ]

    def __init__(self, string):
        parts = string.strip().split(",")
        for i, s in enumerate(self.spec):
            try:
                v = parts[i].strip()
            except IndexError:
                setattr(self, s[0], None)
                continue
            if v == "":
                setattr(self, s[0], None)
            else:
                setattr(self, s[0], s[1](v))

    @property
    def message_generated(self):
        return dateutil.parser.parse(
            "{} {}".format(self.date_message_generated, self.time_message_generated)
        )

    @property
    def message_logged(self):
        return dateutil.parser.parse(
            "{} {}".format(self.date_message_logged, self.time_message_logged)
        )


class PlaneTerm:
    args = None
    latitude = None
    longitude = None

    def __init__(self):
        self.seen = {}
        self.last_printed = datetime.now()
        self.last_cleanup = datetime.now()
        self.last_connect = datetime.now()
        self.max_lines = 24
        self.socks = {
            "dump1090": None,
            "dump978": None,
            "gps": None,
        }

    def parse_args(self, argv=None):
        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            prog=os.path.basename(argv[0]),
        )

        parser.add_argument(
            "--location",
            help="Location in lat,lon format",
        )
        parser.add_argument(
            "--max-distance",
            type=float,
            help="Maximum distance to display, in miles",
        )
        parser.add_argument(
            "--max-altitude",
            type=float,
            help="Maximum altitude to display, in feet",
        )
        parser.add_argument(
            "--interval",
            type=lambda x: timedelta(seconds=float(x)),
            default="5",
            help="Print interval, in seconds",
        )
        parser.add_argument(
            "--stale",
            type=lambda x: timedelta(seconds=float(x)),
            default="60",
            help="Time before a position is stale, in seconds",
        )
        parser.add_argument(
            "--adsb-host",
            default="127.0.0.1",
            help="ADS-B SBS / BaseStation server host",
        )
        parser.add_argument(
            "--adsb-port",
            type=int,
            default="30003",
            help="ADS-B SBS / BaseStation server port",
        )
        parser.add_argument(
            "--uat-host",
            default="127.0.0.1",
            help="UAT JSON server host",
        )
        parser.add_argument(
            "--uat-port",
            type=int,
            default="30979",
            help="UAT JSON server port",
        )
        parser.add_argument(
            "--gps-host",
            default="127.0.0.1",
            help="GPS server host",
        )
        parser.add_argument(
            "--gps-port",
            type=int,
            default="2947",
            help="GPS server port",
        )

        return parser.parse_args(args=argv[1:])

    def degrees_to_cardinal(self, d):
        dirs = (
            ["N", "NNE", "NE", "ENE"]
            + ["E", "ESE", "SE", "SSE"]
            + ["S", "SSW", "SW", "WSW"]
            + ["W", "WNW", "NW", "NNW"]
        )
        ix = int(round(d / (360.0 / len(dirs))))
        return dirs[ix % 16]

    def print_output(self):
        now = datetime.now()
        print("\x1b[2J\x1b[H", end="")
        out_lines = []
        max_seen_distance = 0
        for ident, v in self.seen.items():
            if (not v["latitude"]) or (not v["longitude"]):
                continue
            distance, direction = self.get_distance(v["latitude"], v["longitude"])
            v["distance"] = distance
            v["direction"] = direction
        for ident, v in sorted(
            self.seen.items(),
            key=lambda item: (item[1]["distance"] if item[1]["distance"] else math.inf),
        ):
            if (now - v["last_seen"]) > self.args.stale:
                continue
            if (
                (not v["latitude"])
                or (not v["longitude"])
                or (not v["altitude"])
                or (not v["distance"])
                or (not v["direction"])
            ):
                continue

            if self.args.max_distance and v["distance"] > self.args.max_distance:
                continue
            if self.args.max_altitude and v["altitude"] > self.args.max_altitude:
                continue

            if v["distance"] > max_seen_distance:
                max_seen_distance = v["distance"]
            out = "{callsign:8} is {miles:-5.01f} miles {direction:3} at {feet:6,} feet".format(
                callsign=(v["callsign"] if v["callsign"] else "[{}]".format(ident)),
                feet=v["altitude"],
                miles=v["distance"],
                direction=self.degrees_to_cardinal(v["direction"]),
            )
            if v["ground_speed"]:
                out += ", {:-3} knots".format(v["ground_speed"])
            if v["source"] == "UAT":
                out += " [UAT]"
            out_lines.append(out)

        try:
            max_lines = os.get_terminal_size().lines
        except OSError:
            max_lines = self.max_lines
        if len(out_lines) < max_lines:
            for out in out_lines:
                print(out)
        else:
            for out in out_lines[: (max_lines - 1)]:
                print(out)
            if len(out_lines) == max_lines:
                print(out_lines[-1] + " ", end="", flush=True)
            else:
                print(
                    "         ... plus {remaining} more (max {miles:.01f} miles) ".format(
                        remaining=(len(out_lines) - max_lines + 1),
                        miles=max_seen_distance,
                    ),
                    end="",
                    flush=True,
                )
        self.last_printed = now

    def cleanup(self):
        now = datetime.now()
        for ident in list(self.seen.keys()):
            if (now - self.seen[ident]["last_seen"]) > timedelta(seconds=1800):
                del self.seen[ident]
        self.last_cleanup = now

    def get_distance(self, lat, lon):
        if (not self.latitude) or (not self.longitude):
            return (None, None)
        geo = Geodesic.WGS84.Inverse(self.latitude, self.longitude, lat, lon)
        direction = geo["azi1"] % 360
        distance = geo["s12"] * 3.280839895 / 5280
        return (distance, direction)

    def get_seen(self, ident):
        if ident not in self.seen:
            self.seen[ident] = {
                "callsign": None,
                "latitude": None,
                "longitude": None,
                "altitude": None,
                "distance": None,
                "direction": None,
                "ground_speed": None,
                "last_seen": None,
                "source": None,
            }
        return self.seen[ident]

    def process_dump1090_message(self, line):
        msg = BaseStationMessage(line.decode("UTF-8"))
        if (msg.message_type != "MSG") or (not msg.hex_ident):
            return
        ident = msg.hex_ident.lower()
        seen = self.get_seen(ident)
        seen["source"] = "ADS-B"
        seen["last_seen"] = datetime.now()
        if msg.transmission_type == 1:
            if msg.callsign:
                seen["callsign"] = msg.callsign
        elif msg.transmission_type == 3:
            if msg.altitude:
                seen["altitude"] = msg.altitude
            if msg.latitude:
                seen["latitude"] = msg.latitude
            if msg.longitude:
                seen["longitude"] = msg.longitude
        elif msg.transmission_type in (4, 5):
            if msg.ground_speed:
                seen["ground_speed"] = msg.ground_speed

    def process_dump978_message(self, line):
        msg = json.loads(line)
        ident = msg["address"]
        seen = self.get_seen(ident)
        seen["source"] = "UAT"
        seen["last_seen"] = datetime.now()

        if msg.get("position"):
            if msg["position"].get("lat"):
                seen["latitude"] = msg["position"]["lat"]
            if msg["position"].get("lon"):
                seen["longitude"] = msg["position"]["lon"]

        if msg.get("geometric_altitude"):
            seen["altitude"] = msg["geometric_altitude"]
        elif msg.get("pressure_altitude"):
            seen["altitude"] = msg["pressure_altitude"]
        if msg.get("callsign"):
            seen["callsign"] = msg["callsign"]
        if msg.get("ground_speed"):
            seen["ground_speed"] = msg["ground_speed"]

    def process_gps_message(self, line):
        j = json.loads(line)
        if j.get("class") != "TPV":
            return
        if (not j.get("lat")) or (not j.get("lon")):
            return
        self.latitude = j["lat"]
        self.longitude = j["lon"]

    def connect(self):
        if not self.socks["dump1090"]:
            try:
                self.socks["dump1090"] = socket.socket(
                    socket.AF_INET, socket.SOCK_STREAM
                )
                self.socks["dump1090"].connect(
                    (self.args.adsb_host, self.args.adsb_port)
                )
                self.selector.register(self.socks["dump1090"], selectors.EVENT_READ)
            except ConnectionError:
                self.socks["dump1090"] = None

        if not self.socks["dump978"]:
            try:
                self.socks["dump978"] = socket.socket(
                    socket.AF_INET, socket.SOCK_STREAM
                )
                self.socks["dump978"].connect((self.args.uat_host, self.args.uat_port))
                self.selector.register(self.socks["dump978"], selectors.EVENT_READ)
            except ConnectionError:
                self.socks["dump978"] = None

        if not self.socks["gps"]:
            if self.args.location:
                _lat, _lon = self.args.location.split(",", 1)
                self.latitude = float(_lat)
                self.longitude = float(_lon)
            else:
                try:
                    self.socks["gps"] = socket.socket(
                        socket.AF_INET, socket.SOCK_STREAM
                    )
                    self.socks["gps"].connect((self.args.gps_host, self.args.gps_port))
                    self.socks["gps"].send(b'?WATCH={"enable":true,"json":true};\r\n')
                    self.selector.register(self.socks["gps"], selectors.EVENT_READ)
                except ConnectionError:
                    self.socks["gps"] = None

    def main(self):
        self.args = self.parse_args()

        print("PLANES!")
        print("")
        print("Please wait...")

        self.selector = selectors.DefaultSelector()
        self.connect()

        self.last_printed = datetime.now() - self.args.interval + timedelta(seconds=1)
        lbuf = {}
        while True:
            if datetime.now() > (self.last_connect + timedelta(seconds=10)):
                self.connect()
            events = self.selector.select(2)
            now = datetime.now()
            for key, _ in events:
                sock = key.fileobj
                if sock == self.socks["dump1090"]:
                    sock_name = "dump1090"
                if sock == self.socks["dump978"]:
                    sock_name = "dump978"
                if sock == self.socks["gps"]:
                    sock_name = "gps"
                if sock not in lbuf:
                    lbuf[sock] = b""
                input = sock.recv(1024)
                if not input:
                    sock.close()
                    self.selector.unregister(sock)
                    self.socks[sock_name] = None
                buf = lbuf[sock] + input
                parts = buf.split(b"\n")
                for part in parts[:-1]:
                    part = part.rstrip(b"\r")
                    if sock_name == "dump1090":
                        self.process_dump1090_message(part)
                    elif sock_name == "dump978":
                        self.process_dump978_message(part)
                    elif sock_name == "gps":
                        self.process_gps_message(part)
                lbuf[sock] = parts[-1]

            if (now - self.last_printed) >= self.args.interval:
                self.print_output()
            if (now - self.last_cleanup) >= timedelta(seconds=300):
                self.cleanup()


if __name__ == "__main__":
    try:
        sys.exit(PlaneTerm().main())
    except KeyboardInterrupt:
        print()
        sys.exit()
